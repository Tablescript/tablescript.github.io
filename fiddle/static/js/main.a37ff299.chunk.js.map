{"version":3,"sources":["Editor.js","Code.js","Result.js","ClearButton.js","Console.js","Output.js","Options.js","Fiddle.js","App.js","serviceWorker.js","index.js"],"names":["Editor","script","onChange","className","width","height","mode","theme","name","fontSize","showPrintMargin","showGutter","highlightActiveLine","value","setOptions","showLineNumbers","tabSize","Code","onRun","onClick","Result","result","split","map","line","ClearButton","onClear","Console","output","allOutput","join","readOnly","Output","Options","evaluateCallableResult","validateTables","onChangeEvaluateCallableResult","onChangeValidateTables","type","checked","e","target","Fiddle","passedScript","queryString","parse","window","location","search","useState","setScript","setOutput","setResult","setEvaluateCallableResult","setValidateTables","outputBuffer","useMemo","lines","clear","handlePrint","s","getLines","createOutputBuffer","tablescript","initializeTablescript","runScript","asNativeString","toString","href","version","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a37ff299.chunk.js","sourcesContent":["import React from 'react';\nimport AceEditor from 'react-ace';\n\nimport 'brace/mode/javascript';\nimport 'brace/theme/kuroir';\n\nconst Editor = ({ script, onChange }) => (\n  <AceEditor\n    className=\"w-100 h5 mb1\"\n    width=\"\"\n    height=\"\"\n    mode=\"javascript\"\n    theme=\"kuroir\"\n    name=\"blah2\"\n    onChange={ onChange }\n    fontSize={12}\n    showPrintMargin={true}\n    showGutter={true}\n    highlightActiveLine={true}\n    value={ script }\n    setOptions={{\n      showLineNumbers: true,\n      tabSize: 2,\n    }}\n  />\n);\n\nexport default Editor;\n","import React from 'react';\nimport Editor from './Editor';\n\nconst Code = ({ onRun, script, onChange }) => {\n\n  const clearAndRun = () => onRun(true);\n  const justRun = () => onRun(false);\n\n  return (\n    <div className=\"w-50 ph2\">\n      <h2>Script</h2>\n      <Editor script={ script } onChange={ onChange } />\n      <button onClick={ justRun }>Run</button>\n      <button onClick={ clearAndRun }>Clear &amp; Run</button>\n    </div>\n  );\n};\n\nexport default Code;\n","import React from 'react';\n\nconst Result = ({ result }) => (\n  <div>\n    <h2>Result</h2>\n    { result.split('\\n').map(line => (\n      <p className=\"mt0 mb0\">{line}</p>\n    ))}\n  </div>\n);\n\nexport default Result;\n","import React from 'react';\n\nconst ClearButton = ({ onClear }) => (\n  <button onClick={ onClear }>Clear</button>\n);\n\nexport default ClearButton;\n","import React from 'react';\nimport ClearButton from './ClearButton';\n\nconst Console = ({ output, onClear }) => {\n  const allOutput = output.join('\\n');\n\n  return (\n    <div>\n      <h2>Output</h2>\n      <textarea className=\"w-100 h5 code\" value={ allOutput } readOnly />\n      <ClearButton onClear={ onClear } />\n    </div>\n  );\n};\n\nexport default Console;\n","import React from 'react';\nimport Result from './Result';\nimport Console from './Console';\n\nconst Output = ({ result, output, onClear }) => (\n  <div className=\"w-50 ph2 flex flex-column\">\n    <Console output={ output } onClear={ onClear } />\n    <Result result={ result } />\n  </div>\n);\n\nexport default Output;\n","import React from 'react';\n\nconst Options = ({\n  evaluateCallableResult,\n  validateTables,\n  onChangeEvaluateCallableResult,\n  onChangeValidateTables,\n}) => (\n  <div className=\"ph2 flex flex-row\">\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={evaluateCallableResult}\n        onChange={e => onChangeEvaluateCallableResult(e.target.checked)}\n      /> Evaluate Callable Result\n    </label>\n    <label className=\"ml3\">\n      <input\n        type=\"checkbox\"\n        checked={validateTables}\n        onChange={e => onChangeValidateTables(e.target.checked)}\n      /> Validate Tables\n    </label>\n  </div>\n);\n\nexport default Options;\n","import React, { useState, useMemo } from 'react';\nimport queryString from 'query-string';\nimport { version } from '../package.json';\nimport Code from './Code';\nimport Output from './Output';\nimport Options from './Options';\nimport { initializeTablescript } from 'tablescript.js';\n\nconst createOutputBuffer = () => {\n  let lines = [];\n\n  const clear = () => lines = [];\n\n  const handlePrint = s => lines = [...lines, s];\n\n  const getLines = () => lines;\n\n  return {\n    clear,\n    handlePrint,\n    getLines,\n  };\n};\n\nconst Fiddle = () => {\n  const { script: passedScript } = queryString.parse(window.location.search);\n  const [script, setScript] = useState(passedScript || \"print('I have a ham radio');\\n\");\n  const [output, setOutput] = useState([]);\n  const [result, setResult] = useState('');\n  const [evaluateCallableResult, setEvaluateCallableResult] = useState(true);\n  const [validateTables, setValidateTables] = useState(true);\n\n  const handleClear = () => {\n    setOutput([]);\n    setResult('');\n  };\n\n  const handleChange = (script) => {\n    setScript(script);\n  };\n\n  const outputBuffer = useMemo(() => createOutputBuffer(), []);\n  \n  const tablescript = useMemo(() => initializeTablescript({\n    output: outputBuffer.handlePrint,\n    evaluateCallableResult,\n    validateTables,\n  }), [outputBuffer, evaluateCallableResult, validateTables]);\n\n  const handleRun = (clear) => {\n    try {\n      outputBuffer.clear();\n      const result = tablescript.runScript(script, 'fiddle');\n      setOutput(clear ? outputBuffer.getLines() : [...output, ...outputBuffer.getLines()]);\n      setResult(result.asNativeString());\n    } catch (e) {\n      setResult(e.toString());\n    }\n  };\n\n  return (\n    <>\n      <div className=\"flex flex-row helvetica\">\n        <Options\n          evaluateCallableResult={evaluateCallableResult}\n          validateTables={validateTables}\n          onChangeEvaluateCallableResult={setEvaluateCallableResult}\n          onChangeValidateTables={setValidateTables}\n        />\n      </div>\n      <div className=\"flex flex-row helvetica\">\n        <Code\n          script={script}\n          onChange={handleChange}\n          onRun={handleRun}\n        />\n        <Output result={result} output={output} onClear={handleClear} />\n      </div>\n      <div className=\"flex flex-row helvetica\">\n        <p className=\"pa2 f7 helvetica\">\n          <a href=\"https://github.com/Tablescript/tablescript.js\">Tablescript.js </a> version v{ tablescript.version }\n          &nbsp;\n          (<a href=\"https://github.com/Tablescript/tablescript-fiddle\">Tablescript.js Fiddle</a> version v{ version })\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default Fiddle;\n","import React from 'react';\nimport 'tachyons/css/tachyons.css';\nimport Fiddle from './Fiddle';\n\nconst App = () => (\n  <div className=\"flex flex-column\">\n    <header className=\"pa2 helvetica\">\n      <h1 className=\"\">Tablescript Fiddle</h1>\n      <p>Use this tool to play with the <a href=\"https://tablescript.org\">Tablescript language</a>.</p>\n      <p>Eventually, you will be able to save your scripts, but for now just copy/paste into a file on your computer.</p>\n    </header>\n    <Fiddle />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}